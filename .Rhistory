df2 <- as.data.frame(summary(fit))
df2
df2 <- as.data.frame(summary(fit))[, 4:6]
df2
df2 <- as.data.frame(summary(fit))[, 4:6] %>% rownames_to_column("year")
ggplot(df2, aes(x = year, y = SSB)) + geom_line()+
geom_ribbon(aes(ymin = LOW, ymax = HIGH))
names(df2)
ggplot(df2, aes(x = year, y = SSB)) + geom_line()+
geom_ribbon(aes(ymin = Low, ymax = High))
df2
ggplot(df2, aes(x = year, y = SSB)) + geom_line()+
geom_ribbon(aes(ymin = Low, ymax = High))
ggplot(df2, aes(x = year, y = SSB)) + geom_line()
ggplot(df2, aes(x = year, y = SSB)) + geom_point()
df2 <- as.data.frame(summary(fit))[, 4:6] %>% rownames_to_column("year") %>% mutate(year = as.numeric(year))
ggplot(df2, aes(x = year, y = SSB)) + geom_point()+ geom_line()+
geom_ribbon(aes(ymin = Low, ymax = High))
ggplot(df2, aes(x = year, y = SSB)) + geom_point()+ geom_line()+
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .1)
ggplot(df2, aes(x = year, y = SSB)) + geom_point()+ geom_line()+
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4)
ggplot(df2, aes(x = year, y = SSB)) +
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4)+
geom_point()+ geom_line()
ggplot(df2, aes(x = year, y = SSB), col = "blue") +
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4)+
geom_point()+ geom_line()
ggplot(df2, aes(x = year, y = SSB)) +
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4)+
geom_point(, col = "blue")+ geom_line(col = "blue")
ggplot(df2, aes(x = year, y = SSB)) +
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4)+
geom_point(col = "blue")+ geom_line(col = "blue")
ggplot(df2, aes(x = year, y = SSB)) +
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4)+
geom_point(col = "darkblue")+ geom_line(col = "darkblue")
ggplot(df2, aes(x = year, y = SSB)) +
geom_ribbon(aes(ymin = Low, ymax = High),alpha = .4, fill = "darkblue")+
geom_point(col = "darkblue")+ geom_line(col = "darkblue")
dat <- read.table("clipboard")
dat
t(dat)
dat <- t(as.matrix(dat))
dat
dat <- as.numeric(dat)
dat <- read.table("clipboard")
dat <- read.table("clipboard")
dat <- as.matrix(as.numeric(dat), nrow= nrow(dat))
dat <- as.matrix(as.numeric(dat), nrow= nrow(dat))
dat <- t(as.matrix(as.numeric(dat), nrow= ncol(dat)))
dat
t(dat)
plot(dat[1,],dat[9,])
dat[1,]
plot(dat[1,-1],dat[9,-1])
plot(as.numeric(dat[1,-1]),as.numeric(dat[9,-1]))
plot(as.numeric(dat[1,-1]),as.numeric(dat[9,-1]), pch = 19)
plot(as.numeric(dat[1,-1]),as.numeric(dat[4,-1]), pch = 19)
plot(as.numeric(dat[1,-1]),as.numeric(dat[4,-1]), pch = 19, main = "FLOM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[2,-1]), pch = 19, main = "STORM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[4,-1]), pch = 19, main = "FLOM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[2,-1]), pch = 19, main = "STORM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[3,-1]), pch = 19, main = "STORMFLO")
plot(as.numeric(dat[1,-1]),as.numeric(dat[4,-1]), pch = 19, main = "FLOM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[2,-1]), pch = 19, main = "STORM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[4,-1]), pch = 19, main = "FLOM")
plot(as.numeric(dat[1,-1]),as.numeric(dat[4,-1]), pch = 19, main = "FLOODS")
dat <- read.table("clipboard", header =T, dec = ",")
dat <- read.table("clipboard", header =T, dec = ",")
dat <- read.table("clipboard", header =F, dec = ",")
dat
plot(dat$V1)
x <- read.table("clipboard", header =F, dec = ",")$V1
plot(x)
x*100
x*10
plot(10*x, type = "l")
plot(10*x, type = "h")
plot(x, type = "H")
plot(x, type = "h")
plot(density(x))
plot(density(x[x>0]))
acf(x)
plot(density(x[x>0]))
plot(density(x[x>0], from = 0))
ggplot(data.frame(x = x), aes(sample = x)) + geom_density()
library(ggplot2)
ggplot(data.frame(x = x), aes(sample = x)) + geom_density()
ggplot(data.frame(x = x), aes(x= x)) + geom_density()
ggplot(data.frame(x = x), aes(x= x)) + geom_density(from = 0)
ggplot(data.frame(x = x[x>0]), aes(x= x)) + geom_density()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + geom_density() + geom_hist()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + geom_density() + geom_histogram()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + geom_density() + geom_histogram(stat = ..density..)
ggplot(data.frame(x = x[x>0]), aes(x= x)) + geom_density() + geom_histogram(stat = "..density..")
?geom_histogram
ggplot(data.frame(x = x[x>0]), aes(x= x)) + geom_density() + stat_bin()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin() +
stat_density()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity") +
stat_density()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity") +
stat_density(alpha = 0.1)
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity") +
stat_density(alpha = 0.4)
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity") +
stat_density(alpha = 0.4, color = "red")
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity") +
stat_density(alpha = 0.4, color = "red", fill = "blue")
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
theme_bw()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
theme_minimal()
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
theme_minimal() +
theme(panel.grid = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
theme_minimal() +
theme(panel.grid.minor = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) + stat_bin(aes(y=..density..), alpha=0.5,
position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
stat_bin(aes(y=..density..), alpha=0.5, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
stat_bin(aes(y=..density..), alpha=0.5, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=0.5, position="identity", bins = 40) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 0.4, color = "red", fill = "blue")  +
stat_bin(aes(y=..density..), alpha=0.5, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 0.4, color = "red", fill = "transparent")  +
stat_bin(aes(y=..density..), alpha=0.5, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 1, color = "red", fill = "transparent")  +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
stat_density(alpha = 1, color = "red", fill = "transparent")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 1, color = "red", fill = "transparent")  +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 1, color = "red", fill = "NA")  +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_density(alpha = 1, color = "red", fill = NA)  +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
stat_density(alpha = 1, color = "red", fill = NA)  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
stat_density(alpha = 1, color = "red", fill = NA)  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
stat_density(alpha = 1, color = "red", fill = "grey")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
stat_density(alpha = 1, color = "red", fill = "grey", alpha = .5)  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=1, position="identity", bins = 40) +
stat_density(alpha = .5, color = "red", fill = "grey")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=.5, position="identity", bins = 40) +
stat_density(alpha = .5, color = "red", fill = "grey")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
ggplot(data.frame(x = x[x>0]), aes(x= x)) +
stat_bin(aes(y=..density..), alpha=.5, position="identity", bins = 40) +
stat_density(alpha = .5, color = "red", fill = "blue")  +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())
setwd("C:/Users/a34844/Dropbox/IMR/loddeassessment/Rbifrost/R")
library(TMB)
setwd("../")
compile("src/consumption.cpp")
library(TMB)
compile("src/consumption.cpp")
library(TMB)
compile("src/consumption.cpp")
compile("src/mature.cpp")
compile("src/mature.cpp")
load("data/cap.rda")
load("data/cap.rda")
load("data/catch.rda")
load("data/consumptionData.rda")
consumptionData
source("R/createMaturityData.R")
source("R/consumptionData.R")
source("R/createMaturityParameter.R")
#.. Create data list: ..
data.list <- createMaturityData(cap,
catch,
min_age = 2,
max_age = 3,
start_year =1972,
end_year = 2010)
data.list
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$start_year, agegr = "2-3")
source("R/createMaturityData.R")
source("R/createMaturityParameter.R")
year <- 2010
#.. Create data list: ..
data.list <- createMaturityData(cap,
catch,
min_age = 2,
max_age = 3,
start_year =1972,
end_year = 2010)
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$start_year, agegr = "2-3")
load("data/maturityInitialParameters.rda")
#.. Create data list: ..
data.list <- createMaturityData(cap,
catch,
min_age = 2,
max_age = 3,
start_year =1972,
end_year = 2010)
maturityInitialParameters
data.list$start_year
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$start_year, agegr = "2-3")
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = year, agegr = "2-3")
par.list
NumbersAtLength <- data.list$Nl
data.list$Nl <- data.list$Nl[, data.list$min_age:data$max_age]
# .. initialize TMB object ..
obj <- TMB::MakeADFun(data = data.list,
parameters = par.list,
DLL = "mature")
#.. Create data list: ..
data.list <- createMaturityData(cap,
catch,
min_age = 2,
max_age = 3,
start_year =1972,
end_year = 2010)
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$start_year, agegr = "2-3")
NumbersAtLength <- data.list$Nl
data.list$Nl <- data.list$Nl[, data.list$min_age:data.list$max_age]
# .. initialize TMB object ..
obj <- TMB::MakeADFun(data = data.list,
parameters = par.list,
DLL = "mature")
dyn.load(dynlib("src/mature"))
#.. Create data list: ..
data.list <- createMaturityData(cap,
catch,
min_age = 2,
max_age = 3,
start_year =1972,
end_year = 2010)
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$start_year, agegr = "2-3")
NumbersAtLength <- data.list$Nl
data.list$Nl <- data.list$Nl[, data.list$min_age:data.list$max_age]
# .. initialize TMB object ..
obj <- TMB::MakeADFun(data = data.list,
parameters = par.list,
DLL = "mature")
# .. Optimize likelihood ..
opt <- stats::nlminb(obj$par, obj$fn, obj$gr)
opt
source("R/consumptionData.R")
# -----------------
# -- CONSUMPTION --
# -----------------
load("data/consumptionData.rda")
par.list <- list(
logCmax   = log(1.2),
logChalf  = log(1e2),
logalpha  = log(2),
logbeta   = log(2),
logSigma  = log(1e3)
)
load("data/consumptionData.rda")
compile("src/consumption.cpp")
dyn.load(dynlib("src/consumption"))
par.list <- list(
logCmax   = log(1.2),
logChalf  = log(1e2),
logalpha  = log(2),
logbeta   = log(2),
logSigma  = log(1e3)
)
obj <- TMB::MakeADFun(data = consumptionData,
parameters = par.list,
DLL = "consumption")
# .. Optimize likelihood ..
opt <- stats::nlminb(obj$par, obj$fn, obj$gr)
opt
load("data/catch.rda")
catch
str(catch)
?lubridate
?lubridate::month
lubridate::month(1:12, label = TRUE, abbr = TRUE)
names(catch)[-(1:2)] <- as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE))
catch
Sys.setlocale("LC_TIME", "English")
names(catch)[-(1:2)] <- as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE))
catch
names(catch)
tolower(as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE)))
names(catch)[-(1:2)] <- tolower(as.character(lubridate::month(1:12, label = TRUE, abbr = TRUE)))
head(catch)
save(catch, "data/catch.rda")
save(catch, file = "data/catch.rda")
# Fangst per alder og år
load("data/catch.rda")
# Data som inngår i modningsmodellen
load("data/cap.rda")
head(cap)
# Initial verdier per år (satt sammen av Mahmood)
load("data/maturityInitialParameters.rda")
maturityInitialParameters
head(catch)
head(maturityInitialParameters)
tail(catch)
tail(catch, n = 20)
load("../bifrost/data/catch.rda")
catch
tail(catch, n = 20)
tail(catch, n = 40)
meanlength = cap$`meanlength(cm)`[cap$year == start_year]
start_year =1972
end_year = 2010
max_age = 3
min_age = 2
meanlength = cap$`meanlength(cm)`[cap$year == start_year]
meanweight = cap$`meanweight(g)`[cap$year == end_year]
start_index=start_year - min(cap$year) + 1
end_index=end_year - min(cap$year) + 1
# Nl is the reported number of capelin, in age classes min_age to max_age, start_year to end_year
# It has the following strucutre: Nl(year,l,a)=Nl((year-1)*length_l+l,a)
# dim(Nl): length(meanlength)*(end_year-start_year) x (max_age-min_age)
Nl <- cap[cap$year %in% start_year:end_year, names(cap) %in% 1:5]
# N is the total number of reported capelin for one age class and one year:
# N(year,a)=sum_l Nl(year,l,a)
N=colSums(Nl[1:length(meanlength),min_age:max_age])
for(i in 2:(1+(end_index-start_index))){        #(start_index+1):end_index
tmp=colSums(Nl[((i-1)*length(meanlength)+1):(i*length(meanlength)),min_age:max_age])
N=rbind(N,tmp)
}
rownames(N) <- start_year:end_year
# catchM are the monthly catches in years start_year to end_year; for all age classes and months october-september
# It has the following strucutre: C(year,a,m)=C((year-1)*(min_age-max_age)+(a-min_age),m)
C = subset(catch,
subset = catch$year %in% start_year:end_year & catch$age %in% min_age:max_age,
select = -c(age,year))
C
# save dimensions, as well
length_l=length(meanlength)
index_Nl=start_year+dim(Nl)[1]-1
index_C=start_year+dim(C)[1]-1
data <- list(
min_age = min_age,
max_age = max_age,
start_year = start_year,
end_year = end_year,
length_l = length_l,
meanlength = meanlength,
meanweight = meanweight,
Nl = as.matrix(Nl),
N = as.matrix(N),
C = as.matrix(C)
)
as.matrix(C)
head(catch)
names(catch)[-(1:2)] <- tolower(as.character(
lubridate::month(c(10:12,1:9), label = TRUE, abbr = TRUE)
))
head(catch)
save(catch, file = "data/catch.rda")
head(catch)
data.list$start_year
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$end_year, agegr = "2-3")
NumbersAtLength <- data.list$Nl
data.list$Nl <- data.list$Nl[, data.list$min_age:data.list$max_age]
#
library(TMB)
compile("src/mature.cpp")
dyn.load(dynlib("src/mature"))
# Data som inngår i modningsmodellen
load("data/cap.rda") # <-- Data fra tokt
head(cap)
# Fangst per alder, år og måned (kolonner oct-dec, jan-sep)
load("data/catch.rda")
head(catch)
# Initial verdier per år (satt sammen av Mahmood)
load("data/maturityInitialParameters.rda")
head(maturityInitialParameters)
source("R/createMaturityData.R")
source("R/createMaturityParameter.R")
year <- 2010
#.. Create data list: ..
data.list <- createMaturityData(cap,
catch,
min_age = 2, # estimerer modning fra alder 2-3
max_age = 3,
start_year =1972,
end_year = 2010)
par.list <- createMaturityParameters(parameter = maturityInitialParameters,
year = data.list$end_year, agegr = "2-3")
par.list
NumbersAtLength <- data.list$Nl
data.list$Nl <- data.list$Nl[, data.list$min_age:data.list$max_age]
# .. initialize TMB object ..
obj <- TMB::MakeADFun(data = data.list,
parameters = par.list,
DLL = "mature")
# .. Optimize likelihood ..
opt <- stats::nlminb(obj$par, obj$fn, obj$gr)
opt
# -----------------
# -- CONSUMPTION --
# -----------------
load("data/consumptionData.rda")
compile("src/consumption.cpp")
dyn.load(dynlib("src/consumption"))
par.list <- list(
logCmax   = log(1.2),
logChalf  = log(1e2),
logalpha  = log(2),
logbeta   = log(2),
logSigma  = log(1e3)
)
obj <- TMB::MakeADFun(data = consumptionData,
parameters = par.list,
DLL = "consumption")
consumptionData
# .. initialize TMB object ..
obj <- TMB::MakeADFun(data = data.list,
parameters = par.list,
DLL = "mature", silent =TRUE)
